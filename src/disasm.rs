#[derive(Debug)]
pub enum Opcode {
    /// 0x00 Stop and Arithmetic Operation.
    STOP(u8),
    ADD(u8),
    MUL(u8),
    SUB(u8),
    DIV(u8),
    SDIV(u8),
    MOD(u8),
    SMOD(u8),
    ADDMOD(u8),
    MULMOD(u8),
    EXP(u8),
    SIGNEXTEND(u8),
    /// 0x10: Comparison & Bitwise Logic Operations.
    LT(u8),
    GT(u8),
    SLT(u8),
    SGT(u8),
    EQ(u8),
    ISZERO(u8),
    AND(u8),
    OR(u8),
    XOR(u8),
    NOT(u8),
    BYTE(u8),
    SHL(u8),
    SAR(u8),
    SHR(u8),
    /// 0x20: SHA3.
    KECCAK256(u8),
    /// 0x30: Environmental Information.
    ADDRESS(u8),
    BALANCE(u8),
    ORIGIN(u8),
    CALLER(u8),
    CALLVALUE(u8),
    CALLDATALOAD(u8),
    CALLDATASIZE(u8),
    CALLDATACOPY(u8),
    CODESIZE(u8),
    CODECOPY(u8),
    GASPRICE(u8),
    EXTCODESIZE(u8),
    EXTCODECOPY(u8),
    RETURNDATASIZE(u8),
    RETURNDATACOPY(u8),
    EXTCODEHASH(u8),
    /// 0x40: Block Information.
    BLOCKHASH(u8),
    COINBASE(u8),
    TIMESTAMP(u8),
    NUMBER(u8),
    DIFFICULTY(u8),
    GASLIMIT(u8),
    /// 0x50: Stack, Memory & Flow Operations.
    POP(u8),
    MLOAD(u8),
    MSTORE(u8),
    MSTORE8(u8),
    SLOAD(u8),
    SSTORE(u8),
    JUMP(u8),
    JUMPI(u8),
    PC(u8),
    MSIZE(u8),
    GAS(u8),
    JUMPDEST(u8),
    /// 0x60 & 0x70: Push Operations.
    PUSH1(u8),
    PUSH2(u8),
    PUSH3(u8),
    PUSH4(u8),
    PUSH5(u8),
    PUSH6(u8),
    PUSH7(u8),
    PUSH8(u8),
    PUSH9(u8),
    PUSH10(u8),
    PUSH11(u8),
    PUSH12(u8),
    PUSH13(u8),
    PUSH14(u8),
    PUSH15(u8),
    PUSH16(u8),
    PUSH17(u8),
    PUSH18(u8),
    PUSH19(u8),
    PUSH20(u8),
    PUSH21(u8),
    PUSH22(u8),
    PUSH23(u8),
    PUSH24(u8),
    PUSH25(u8),
    PUSH26(u8),
    PUSH27(u8),
    PUSH28(u8),
    PUSH29(u8),
    PUSH30(u8),
    PUSH31(u8),
    PUSH32(u8),
    /// 0x80 Duplication Operations.
    DUP1(u8),
    DUP2(u8),
    DUP3(u8),
    DUP4(u8),
    DUP5(u8),
    DUP6(u8),
    DUP7(u8),
    DUP8(u8),
    DUP9(u8),
    DUP10(u8),
    DUP11(u8),
    DUP12(u8),
    DUP13(u8),
    DUP14(u8),
    DUP15(u8),
    DUP16(u8),
    /// 0x90 Exchange Operations.
    SWAP1(u8),
    SWAP2(u8),
    SWAP3(u8),
    SWAP4(u8),
    SWAP5(u8),
    SWAP6(u8),
    SWAP7(u8),
    SWAP8(u8),
    SWAP9(u8),
    SWAP10(u8),
    SWAP11(u8),
    SWAP12(u8),
    SWAP13(u8),
    SWAP14(u8),
    SWAP15(u8),
    SWAP16(u8),
    /// 0xa0 Logging Operations.
    LOG0(u8),
    LOG1(u8),
    LOG2(u8),
    LOG3(u8),
    LOG4(u8),
    /// 0xb0 System Operations.
    CREATE(u8),
    CALL(u8),
    CALLCODE(u8),
    RETURN(u8),
    DELEGATECALL(u8),
    CREATE2(u8),
    STATICCALL(u8),
    REVERT(u8),
    INVALID(u8),
    SELFDESTRUCT(u8),

    /// 0xfe: Reserved.
    RESERVED(u8),

    // UNKNOWN
    UNKNOWN,
}

impl Opcode {
    pub fn new(code: u8) -> Opcode {
        match code {
            0x00 => Opcode::STOP(code),
            0x01 => Opcode::ADD(code),
            0x02 => Opcode::MUL(code),
            0x03 => Opcode::SUB(code),
            0x04 => Opcode::DIV(code),
            0x05 => Opcode::SDIV(code),
            0x06 => Opcode::MOD(code),
            0x07 => Opcode::SMOD(code),
            0x08 => Opcode::ADDMOD(code),
            0x09 => Opcode::MULMOD(code),
            0x0a => Opcode::EXP(code),
            0x0b => Opcode::SIGNEXTEND(code),
            0x10 => Opcode::LT(code),
            0x11 => Opcode::GT(code),
            0x12 => Opcode::SLT(code),
            0x13 => Opcode::SGT(code),
            0x14 => Opcode::EQ(code),
            0x15 => Opcode::ISZERO(code),
            0x16 => Opcode::AND(code),
            0x17 => Opcode::OR(code),
            0x18 => Opcode::XOR(code),
            0x19 => Opcode::NOT(code),
            0x1a => Opcode::BYTE(code),
            0x20 => Opcode::KECCAK256(code),
            0x30 => Opcode::ADDRESS(code),
            0x31 => Opcode::BALANCE(code),
            0x32 => Opcode::ORIGIN(code),
            0x33 => Opcode::CALLER(code),
            0x34 => Opcode::CALLVALUE(code),
            0x35 => Opcode::CALLDATALOAD(code),
            0x36 => Opcode::CALLDATASIZE(code),
            0x37 => Opcode::CALLDATACOPY(code),
            0x38 => Opcode::CODESIZE(code),
            0x39 => Opcode::CODECOPY(code),
            0x3a => Opcode::GASPRICE(code),
            0x3b => Opcode::EXTCODESIZE(code),
            0x3c => Opcode::EXTCODECOPY(code),
            0x40 => Opcode::BLOCKHASH(code),
            0x50 => Opcode::POP(code),
            0x51 => Opcode::MLOAD(code),
            0x52 => Opcode::MSTORE(code),
            0x53 => Opcode::MSTORE8(code),
            0x54 => Opcode::SLOAD(code),
            0x55 => Opcode::SSTORE(code),
            0x56 => Opcode::JUMP(code),
            0x57 => Opcode::JUMPI(code),
            0x58 => Opcode::PC(code),
            0x59 => Opcode::MSIZE(code),
            0x5a => Opcode::GAS(code),
            0x5b => Opcode::JUMPDEST(code),
            0x60 => Opcode::PUSH1(code),
            0x61 => Opcode::PUSH2(code),
            0x62 => Opcode::PUSH3(code),
            0x63 => Opcode::PUSH4(code),
            0x64 => Opcode::PUSH5(code),
            0x65 => Opcode::PUSH6(code),
            0x66 => Opcode::PUSH7(code),
            0x67 => Opcode::PUSH8(code),
            0x68 => Opcode::PUSH9(code),
            0x69 => Opcode::PUSH10(code),
            0x6a => Opcode::PUSH11(code),
            0x6b => Opcode::PUSH12(code),
            0x6c => Opcode::PUSH13(code),
            0x6d => Opcode::PUSH14(code),
            0x6e => Opcode::PUSH15(code),
            0x6f => Opcode::PUSH16(code),
            0x70 => Opcode::PUSH17(code),
            0x71 => Opcode::PUSH18(code),
            0x72 => Opcode::PUSH19(code),
            0x73 => Opcode::PUSH20(code),
            0x74 => Opcode::PUSH21(code),
            0x75 => Opcode::PUSH22(code),
            0x76 => Opcode::PUSH23(code),
            0x77 => Opcode::PUSH24(code),
            0x78 => Opcode::PUSH25(code),
            0x79 => Opcode::PUSH26(code),
            0x7a => Opcode::PUSH27(code),
            0x7b => Opcode::PUSH28(code),
            0x7c => Opcode::PUSH29(code),
            0x7d => Opcode::PUSH30(code),
            0x7e => Opcode::PUSH31(code),
            0x7f => Opcode::PUSH32(code),
            0x80 => Opcode::DUP1(code),
            0x81 => Opcode::DUP2(code),
            0x82 => Opcode::DUP3(code),
            0x83 => Opcode::DUP4(code),
            0x84 => Opcode::DUP5(code),
            0x85 => Opcode::DUP6(code),
            0x86 => Opcode::DUP7(code),
            0x87 => Opcode::DUP8(code),
            0x88 => Opcode::DUP9(code),
            0x89 => Opcode::DUP10(code),
            0x8a => Opcode::DUP11(code),
            0x8b => Opcode::DUP12(code),
            0x8c => Opcode::DUP13(code),
            0x8d => Opcode::DUP14(code),
            0x8e => Opcode::DUP15(code),
            0x8f => Opcode::DUP16(code),
            0x90 => Opcode::SWAP1(code),
            0x91 => Opcode::SWAP2(code),
            0x92 => Opcode::SWAP3(code),
            0x93 => Opcode::SWAP4(code),
            0x94 => Opcode::SWAP5(code),
            0x95 => Opcode::SWAP6(code),
            0x96 => Opcode::SWAP7(code),
            0x97 => Opcode::SWAP8(code),
            0x98 => Opcode::SWAP9(code),
            0x99 => Opcode::SWAP10(code),
            0x9a => Opcode::SWAP11(code),
            0x9b => Opcode::SWAP12(code),
            0x9c => Opcode::SWAP13(code),
            0x9d => Opcode::SWAP14(code),
            0x9e => Opcode::SWAP15(code),
            0x9f => Opcode::SWAP16(code),
            0xa0 => Opcode::LOG0(code),
            0xa1 => Opcode::LOG1(code),
            0xa2 => Opcode::LOG2(code),
            0xa3 => Opcode::LOG3(code),
            0xa4 => Opcode::LOG4(code),
            0xf0 => Opcode::CREATE(code),
            0xf1 => Opcode::CALL(code),
            0xf2 => Opcode::CALLCODE(code),
            0xf3 => Opcode::RETURN(code),
            0xf4 => Opcode::DELEGATECALL(code),
            0xfa => Opcode::STATICCALL(code),
            0xfd => Opcode::REVERT(code),
            0xfe => Opcode::INVALID(code),
            0xff => Opcode::SELFDESTRUCT(code),
            _ => Opcode::UNKNOWN,
        }
    }

    pub fn disasm(ops: Vec<u8>) -> Vec<Self> {
        let mut result = Vec::new();
        for op in ops {
            let opcode = Self::new(op);
            result.push(opcode);
        }
        result
    }
}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        let push = super::Opcode::PUSH1(0x01);
        println!("{:?}", push);
    }
}
