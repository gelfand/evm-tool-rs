#[derive(PartialEq, Eq)]
// TODO: Add arguments for opcodes which require them.
pub enum Opcode {
    /// 0x00 Stop and Arithmetic Operation.
    STOP,
    ADD,
    MUL,
    SUB,
    DIV,
    SDIV,
    MOD,
    SMOD,
    ADDMOD,
    MULMOD,
    EXP,
    SIGNEXTEND,
    /// 0x10: Comparison & Bitwise Logic Operations.
    LT,
    GT,
    SLT,
    SGT,
    EQ,
    ISZERO,
    AND,
    OR,
    XOR,
    NOT,
    BYTE,
    SHL,
    SHR,
    SAR,
    /// 0x20: SHA3.
    KECCAK256,
    /// 0x30: Environmental Information.
    ADDRESS,
    BALANCE,
    ORIGIN,
    CALLER,
    CALLVALUE,
    CALLDATALOAD,
    CALLDATASIZE,
    CALLDATACOPY,
    CODESIZE,
    CODECOPY,
    GASPRICE,
    EXTCODESIZE,
    EXTCODECOPY,
    RETURNDATASIZE,
    RETURNDATACOPY,
    EXTCODEHASH,
    /// 0x40: Block Information.
    BLOCKHASH,
    COINBASE,
    TIMESTAMP,
    NUMBER,
    DIFFICULTY,
    GASLIMIT,
    CHAINID,
    BASEFEE,
    /// 0x50: Stack, Memory & Flow Operations.
    POP,
    MLOAD,
    MSTORE,
    MSTORE8,
    SLOAD,
    SSTORE,
    JUMP,
    JUMPI,
    PC,
    MSIZE,
    GAS,
    JUMPDEST,
    /// 0x60 & 0x70: Push Operations.
    PUSH1,
    PUSH2,
    PUSH3,
    PUSH4,
    PUSH5,
    PUSH6,
    PUSH7,
    PUSH8,
    PUSH9,
    PUSH10,
    PUSH11,
    PUSH12,
    PUSH13,
    PUSH14,
    PUSH15,
    PUSH16,
    PUSH17,
    PUSH18,
    PUSH19,
    PUSH20,
    PUSH21,
    PUSH22,
    PUSH23,
    PUSH24,
    PUSH25,
    PUSH26,
    PUSH27,
    PUSH28,
    PUSH29,
    PUSH30,
    PUSH31,
    PUSH32,
    /// 0x80 Duplication Operations.
    DUP1,
    DUP2,
    DUP3,
    DUP4,
    DUP5,
    DUP6,
    DUP7,
    DUP8,
    DUP9,
    DUP10,
    DUP11,
    DUP12,
    DUP13,
    DUP14,
    DUP15,
    DUP16,
    /// 0x90 Exchange Operations.
    SWAP1,
    SWAP2,
    SWAP3,
    SWAP4,
    SWAP5,
    SWAP6,
    SWAP7,
    SWAP8,
    SWAP9,
    SWAP10,
    SWAP11,
    SWAP12,
    SWAP13,
    SWAP14,
    SWAP15,
    SWAP16,
    /// 0xa0 Logging Operations.
    LOG0,
    LOG1,
    LOG2,
    LOG3,
    LOG4,
    /// 0xb0 System Operations.
    CREATE,
    CALL,
    CALLCODE,
    RETURN,
    DELEGATECALL,
    CREATE2,
    STATICCALL,
    REVERT,
    INVALID,
    SELFDESTRUCT,
    // UNKNOWN
    UNKNOWN,
}

impl Opcode {
    pub fn new(code: u8) -> Opcode {
        match code {
            0x00 => Opcode::STOP,
            0x01 => Opcode::ADD,
            0x02 => Opcode::MUL,
            0x03 => Opcode::SUB,
            0x04 => Opcode::DIV,
            0x05 => Opcode::SDIV,
            0x06 => Opcode::MOD,
            0x07 => Opcode::SMOD,
            0x08 => Opcode::ADDMOD,
            0x09 => Opcode::MULMOD,
            0x0a => Opcode::EXP,
            0x0b => Opcode::SIGNEXTEND,
            0x10 => Opcode::LT,
            0x11 => Opcode::GT,
            0x12 => Opcode::SLT,
            0x13 => Opcode::SGT,
            0x14 => Opcode::EQ,
            0x15 => Opcode::ISZERO,
            0x16 => Opcode::AND,
            0x17 => Opcode::OR,
            0x18 => Opcode::XOR,
            0x19 => Opcode::NOT,
            0x1a => Opcode::BYTE,
            0x1b => Opcode::SHL,
            0x1d => Opcode::SAR,
            0x1c => Opcode::SHR,
            0x20 => Opcode::KECCAK256,
            0x30 => Opcode::ADDRESS,
            0x31 => Opcode::BALANCE,
            0x32 => Opcode::ORIGIN,
            0x33 => Opcode::CALLER,
            0x34 => Opcode::CALLVALUE,
            0x35 => Opcode::CALLDATALOAD,
            0x36 => Opcode::CALLDATASIZE,
            0x37 => Opcode::CALLDATACOPY,
            0x38 => Opcode::CODESIZE,
            0x39 => Opcode::CODECOPY,
            0x3a => Opcode::GASPRICE,
            0x3b => Opcode::EXTCODESIZE,
            0x3c => Opcode::EXTCODECOPY,
            0x3d => Opcode::RETURNDATASIZE,
            0x3e => Opcode::RETURNDATACOPY,
            0x3f => Opcode::EXTCODEHASH,
            0x40 => Opcode::BLOCKHASH,
            0x41 => Opcode::COINBASE,
            0x42 => Opcode::TIMESTAMP,
            0x43 => Opcode::NUMBER,
            0x44 => Opcode::DIFFICULTY,
            0x45 => Opcode::GASLIMIT,
            0x46 => Opcode::CHAINID,
            0x48 => Opcode::BASEFEE,
            0x50 => Opcode::POP,
            0x51 => Opcode::MLOAD,
            0x52 => Opcode::MSTORE,
            0x53 => Opcode::MSTORE8,
            0x54 => Opcode::SLOAD,
            0x55 => Opcode::SSTORE,
            0x56 => Opcode::JUMP,
            0x57 => Opcode::JUMPI,
            0x58 => Opcode::PC,
            0x59 => Opcode::MSIZE,
            0x5a => Opcode::GAS,
            0x5b => Opcode::JUMPDEST,
            0x60 => Opcode::PUSH1,
            0x61 => Opcode::PUSH2,
            0x62 => Opcode::PUSH3,
            0x63 => Opcode::PUSH4,
            0x64 => Opcode::PUSH5,
            0x65 => Opcode::PUSH6,
            0x66 => Opcode::PUSH7,
            0x67 => Opcode::PUSH8,
            0x68 => Opcode::PUSH9,
            0x69 => Opcode::PUSH10,
            0x6a => Opcode::PUSH11,
            0x6b => Opcode::PUSH12,
            0x6c => Opcode::PUSH13,
            0x6d => Opcode::PUSH14,
            0x6e => Opcode::PUSH15,
            0x6f => Opcode::PUSH16,
            0x70 => Opcode::PUSH17,
            0x71 => Opcode::PUSH18,
            0x72 => Opcode::PUSH19,
            0x73 => Opcode::PUSH20,
            0x74 => Opcode::PUSH21,
            0x75 => Opcode::PUSH22,
            0x76 => Opcode::PUSH23,
            0x77 => Opcode::PUSH24,
            0x78 => Opcode::PUSH25,
            0x79 => Opcode::PUSH26,
            0x7a => Opcode::PUSH27,
            0x7b => Opcode::PUSH28,
            0x7c => Opcode::PUSH29,
            0x7d => Opcode::PUSH30,
            0x7e => Opcode::PUSH31,
            0x7f => Opcode::PUSH32,
            0x80 => Opcode::DUP1,
            0x81 => Opcode::DUP2,
            0x82 => Opcode::DUP3,
            0x83 => Opcode::DUP4,
            0x84 => Opcode::DUP5,
            0x85 => Opcode::DUP6,
            0x86 => Opcode::DUP7,
            0x87 => Opcode::DUP8,
            0x88 => Opcode::DUP9,
            0x89 => Opcode::DUP10,
            0x8a => Opcode::DUP11,
            0x8b => Opcode::DUP12,
            0x8c => Opcode::DUP13,
            0x8d => Opcode::DUP14,
            0x8e => Opcode::DUP15,
            0x8f => Opcode::DUP16,
            0x90 => Opcode::SWAP1,
            0x91 => Opcode::SWAP2,
            0x92 => Opcode::SWAP3,
            0x93 => Opcode::SWAP4,
            0x94 => Opcode::SWAP5,
            0x95 => Opcode::SWAP6,
            0x96 => Opcode::SWAP7,
            0x97 => Opcode::SWAP8,
            0x98 => Opcode::SWAP9,
            0x99 => Opcode::SWAP10,
            0x9a => Opcode::SWAP11,
            0x9b => Opcode::SWAP12,
            0x9c => Opcode::SWAP13,
            0x9d => Opcode::SWAP14,
            0x9e => Opcode::SWAP15,
            0x9f => Opcode::SWAP16,
            0xa0 => Opcode::LOG0,
            0xa1 => Opcode::LOG1,
            0xa2 => Opcode::LOG2,
            0xa3 => Opcode::LOG3,
            0xa4 => Opcode::LOG4,
            0xf0 => Opcode::CREATE,
            0xf1 => Opcode::CALL,
            0xf2 => Opcode::CALLCODE,
            0xf3 => Opcode::RETURN,
            0xf4 => Opcode::DELEGATECALL,
            0xf5 => Opcode::CREATE2,
            0xfa => Opcode::STATICCALL,
            0xfd => Opcode::REVERT,
            0xfe => Opcode::INVALID,
            0xff => Opcode::SELFDESTRUCT,
            _ => Opcode::UNKNOWN,
        }
    }

    pub fn disasm(ops: Vec<u8>) -> Vec<Self> {
        let mut result = Vec::new();
        for op in ops {
            let opcode = Self::new(op);
            result.push(opcode);
        }
        result
    }
}

impl std::fmt::Debug for Opcode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Opcode::STOP => write!(f, "0x00"),
            Opcode::ADD => write!(f, "0x01"),
            Opcode::MUL => write!(f, "0x02"),
            Opcode::SUB => write!(f, "0x03"),
            Opcode::DIV => write!(f, "0x04"),
            Opcode::SDIV => write!(f, "0x05"),
            Opcode::MOD => write!(f, "0x06"),
            Opcode::SMOD => write!(f, "0x07"),
            Opcode::ADDMOD => write!(f, "0x08"),
            Opcode::MULMOD => write!(f, "0x09"),
            Opcode::EXP => write!(f, "0x0a"),
            Opcode::SIGNEXTEND => write!(f, "0x0b"),
            Opcode::LT => write!(f, "0x10"),
            Opcode::GT => write!(f, "0x11"),
            Opcode::SLT => write!(f, "0x12"),
            Opcode::SGT => write!(f, "0x13"),
            Opcode::EQ => write!(f, "0x14"),
            Opcode::ISZERO => write!(f, "0x15"),
            Opcode::AND => write!(f, "0x16"),
            Opcode::OR => write!(f, "0x17"),
            Opcode::XOR => write!(f, "0x18"),
            Opcode::NOT => write!(f, "0x19"),
            Opcode::BYTE => write!(f, "0x1a"),
            Opcode::SHL => write!(f, "0x1b"),
            Opcode::SHR => write!(f, "0x1c"),
            Opcode::SAR => write!(f, "0x1d"),
            Opcode::KECCAK256 => write!(f, "0x20"),
            Opcode::ADDRESS => write!(f, "0x30"),
            Opcode::BALANCE => write!(f, "0x31"),
            Opcode::ORIGIN => write!(f, "0x32"),
            Opcode::CALLER => write!(f, "0x33"),
            Opcode::CALLVALUE => write!(f, "0x34"),
            Opcode::CALLDATALOAD => write!(f, "0x35"),
            Opcode::CALLDATASIZE => write!(f, "0x36"),
            Opcode::CALLDATACOPY => write!(f, "0x37"),
            Opcode::CODESIZE => write!(f, "0x38"),
            Opcode::CODECOPY => write!(f, "0x39"),
            Opcode::GASPRICE => write!(f, "0x3a"),
            Opcode::EXTCODESIZE => write!(f, "0x3b"),
            Opcode::EXTCODECOPY => write!(f, "0x3c"),
            Opcode::RETURNDATASIZE => write!(f, "0x3d"),
            Opcode::RETURNDATACOPY => write!(f, "0x3e"),
            Opcode::EXTCODEHASH => write!(f, "0x3f"),
            Opcode::BLOCKHASH => write!(f, "0x40"),
            Opcode::COINBASE => write!(f, "0x41"),
            Opcode::TIMESTAMP => write!(f, "0x42"),
            Opcode::NUMBER => write!(f, "0x43"),
            Opcode::DIFFICULTY => write!(f, "0x44"),
            Opcode::GASLIMIT => write!(f, "0x45"),
            Opcode::CHAINID => write!(f, "0x46"),
            Opcode::BASEFEE => write!(f, "0x48"),
            Opcode::POP => write!(f, "0x50"),
            Opcode::MLOAD => write!(f, "0x51"),
            Opcode::MSTORE => write!(f, "0x52"),
            Opcode::MSTORE8 => write!(f, "0x53"),
            Opcode::SLOAD => write!(f, "0x54"),
            Opcode::SSTORE => write!(f, "0x55"),
            Opcode::JUMP => write!(f, "0x56"),
            Opcode::JUMPI => write!(f, "0x57"),
            Opcode::PC => write!(f, "0x58"),
            Opcode::MSIZE => write!(f, "0x59"),
            Opcode::GAS => write!(f, "0x5a"),
            Opcode::JUMPDEST => write!(f, "0x5b"),
            Opcode::PUSH1 => write!(f, "0x60"),
            Opcode::PUSH2 => write!(f, "0x61"),
            Opcode::PUSH3 => write!(f, "0x62"),
            Opcode::PUSH4 => write!(f, "0x63"),
            Opcode::PUSH5 => write!(f, "0x64"),
            Opcode::PUSH6 => write!(f, "0x65"),
            Opcode::PUSH7 => write!(f, "0x66"),
            Opcode::PUSH8 => write!(f, "0x67"),
            Opcode::PUSH9 => write!(f, "0x68"),
            Opcode::PUSH10 => write!(f, "0x69"),
            Opcode::PUSH11 => write!(f, "0x6a"),
            Opcode::PUSH12 => write!(f, "0x6b"),
            Opcode::PUSH13 => write!(f, "0x6c"),
            Opcode::PUSH14 => write!(f, "0x6d"),
            Opcode::PUSH15 => write!(f, "0x6e"),
            Opcode::PUSH16 => write!(f, "0x6f"),
            Opcode::PUSH17 => write!(f, "0x70"),
            Opcode::PUSH18 => write!(f, "0x71"),
            Opcode::PUSH19 => write!(f, "0x72"),
            Opcode::PUSH20 => write!(f, "0x73"),
            Opcode::PUSH21 => write!(f, "0x74"),
            Opcode::PUSH22 => write!(f, "0x75"),
            Opcode::PUSH23 => write!(f, "0x76"),
            Opcode::PUSH24 => write!(f, "0x77"),
            Opcode::PUSH25 => write!(f, "0x78"),
            Opcode::PUSH26 => write!(f, "0x79"),
            Opcode::PUSH27 => write!(f, "0x7a"),
            Opcode::PUSH28 => write!(f, "0x7b"),
            Opcode::PUSH29 => write!(f, "0x7c"),
            Opcode::PUSH30 => write!(f, "0x7d"),
            Opcode::PUSH31 => write!(f, "0x7e"),
            Opcode::PUSH32 => write!(f, "0x7f"),
            Opcode::DUP1 => write!(f, "0x80"),
            Opcode::DUP2 => write!(f, "0x81"),
            Opcode::DUP3 => write!(f, "0x82"),
            Opcode::DUP4 => write!(f, "0x83"),
            Opcode::DUP5 => write!(f, "0x84"),
            Opcode::DUP6 => write!(f, "0x85"),
            Opcode::DUP7 => write!(f, "0x86"),
            Opcode::DUP8 => write!(f, "0x87"),
            Opcode::DUP9 => write!(f, "0x88"),
            Opcode::DUP10 => write!(f, "0x89"),
            Opcode::DUP11 => write!(f, "0x8a"),
            Opcode::DUP12 => write!(f, "0x8b"),
            Opcode::DUP13 => write!(f, "0x8c"),
            Opcode::DUP14 => write!(f, "0x8d"),
            Opcode::DUP15 => write!(f, "0x8e"),
            Opcode::DUP16 => write!(f, "0x8f"),
            Opcode::SWAP1 => write!(f, "0x90"),
            Opcode::SWAP2 => write!(f, "0x91"),
            Opcode::SWAP3 => write!(f, "0x92"),
            Opcode::SWAP4 => write!(f, "0x93"),
            Opcode::SWAP5 => write!(f, "0x94"),
            Opcode::SWAP6 => write!(f, "0x95"),
            Opcode::SWAP7 => write!(f, "0x96"),
            Opcode::SWAP8 => write!(f, "0x97"),
            Opcode::SWAP9 => write!(f, "0x98"),
            Opcode::SWAP10 => write!(f, "0x99"),
            Opcode::SWAP11 => write!(f, "0x9a"),
            Opcode::SWAP12 => write!(f, "0x9b"),
            Opcode::SWAP13 => write!(f, "0x9c"),
            Opcode::SWAP14 => write!(f, "0x9d"),
            Opcode::SWAP15 => write!(f, "0x9e"),
            Opcode::SWAP16 => write!(f, "0x9f"),
            Opcode::LOG0 => write!(f, "0xa0"),
            Opcode::LOG1 => write!(f, "0xa1"),
            Opcode::LOG2 => write!(f, "0xa2"),
            Opcode::LOG3 => write!(f, "0xa3"),
            Opcode::LOG4 => write!(f, "0xa4"),
            Opcode::CREATE => write!(f, "0xf0"),
            Opcode::CALL => write!(f, "0xf1"),
            Opcode::CALLCODE => write!(f, "0xf2"),
            Opcode::RETURN => write!(f, "0xf3"),
            Opcode::DELEGATECALL => write!(f, "0xf4"),
            Opcode::CREATE2 => write!(f, "0xf5"),
            Opcode::STATICCALL => write!(f, "0xfa"),
            Opcode::REVERT => write!(f, "0xfd"),
            Opcode::INVALID => write!(f, "0xfe"),
            Opcode::SELFDESTRUCT => write!(f, "0xff"),
            Opcode::UNKNOWN => write!(f, "0x???"),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use hex_literal::hex;

    #[test]
    fn it_works() {
        let ops = hex!("000102030405060708090a0b101112131415161718191a1b1c1d20303132333435363738393a3b3c3d3e3f4041424344454648505152535455565758595a5b606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4f0f1f2f3f4f5fafdfeff").to_vec();
        Opcode::disasm(ops)
            .into_iter()
            .zip(vec![
                Opcode::STOP,
                Opcode::ADD,
                Opcode::MUL,
                Opcode::SUB,
                Opcode::DIV,
                Opcode::SDIV,
                Opcode::MOD,
                Opcode::SMOD,
                Opcode::ADDMOD,
                Opcode::MULMOD,
                Opcode::EXP,
                Opcode::SIGNEXTEND,
                Opcode::LT,
                Opcode::GT,
                Opcode::SLT,
                Opcode::SGT,
                Opcode::EQ,
                Opcode::ISZERO,
                Opcode::AND,
                Opcode::OR,
                Opcode::XOR,
                Opcode::NOT,
                Opcode::BYTE,
                Opcode::SHL,
                Opcode::SHR,
                Opcode::SAR,
                Opcode::KECCAK256,
                Opcode::ADDRESS,
                Opcode::BALANCE,
                Opcode::ORIGIN,
                Opcode::CALLER,
                Opcode::CALLVALUE,
                Opcode::CALLDATALOAD,
                Opcode::CALLDATASIZE,
                Opcode::CALLDATACOPY,
                Opcode::CODESIZE,
                Opcode::CODECOPY,
                Opcode::GASPRICE,
                Opcode::EXTCODESIZE,
                Opcode::EXTCODECOPY,
                Opcode::RETURNDATASIZE,
                Opcode::RETURNDATACOPY,
                Opcode::EXTCODEHASH,
                Opcode::BLOCKHASH,
                Opcode::COINBASE,
                Opcode::TIMESTAMP,
                Opcode::NUMBER,
                Opcode::DIFFICULTY,
                Opcode::GASLIMIT,
                Opcode::CHAINID,
                Opcode::BASEFEE,
                Opcode::POP,
                Opcode::MLOAD,
                Opcode::MSTORE,
                Opcode::MSTORE8,
                Opcode::SLOAD,
                Opcode::SSTORE,
                Opcode::JUMP,
                Opcode::JUMPI,
                Opcode::PC,
                Opcode::MSIZE,
                Opcode::GAS,
                Opcode::JUMPDEST,
                Opcode::PUSH1,
                Opcode::PUSH2,
                Opcode::PUSH3,
                Opcode::PUSH4,
                Opcode::PUSH5,
                Opcode::PUSH6,
                Opcode::PUSH7,
                Opcode::PUSH8,
                Opcode::PUSH9,
                Opcode::PUSH10,
                Opcode::PUSH11,
                Opcode::PUSH12,
                Opcode::PUSH13,
                Opcode::PUSH14,
                Opcode::PUSH15,
                Opcode::PUSH16,
                Opcode::PUSH17,
                Opcode::PUSH18,
                Opcode::PUSH19,
                Opcode::PUSH20,
                Opcode::PUSH21,
                Opcode::PUSH22,
                Opcode::PUSH23,
                Opcode::PUSH24,
                Opcode::PUSH25,
                Opcode::PUSH26,
                Opcode::PUSH27,
                Opcode::PUSH28,
                Opcode::PUSH29,
                Opcode::PUSH30,
                Opcode::PUSH31,
                Opcode::PUSH32,
                Opcode::DUP1,
                Opcode::DUP2,
                Opcode::DUP3,
                Opcode::DUP4,
                Opcode::DUP5,
                Opcode::DUP6,
                Opcode::DUP7,
                Opcode::DUP8,
                Opcode::DUP9,
                Opcode::DUP10,
                Opcode::DUP11,
                Opcode::DUP12,
                Opcode::DUP13,
                Opcode::DUP14,
                Opcode::DUP15,
                Opcode::DUP16,
                Opcode::SWAP1,
                Opcode::SWAP2,
                Opcode::SWAP3,
                Opcode::SWAP4,
                Opcode::SWAP5,
                Opcode::SWAP6,
                Opcode::SWAP7,
                Opcode::SWAP8,
                Opcode::SWAP9,
                Opcode::SWAP10,
                Opcode::SWAP11,
                Opcode::SWAP12,
                Opcode::SWAP13,
                Opcode::SWAP14,
                Opcode::SWAP15,
                Opcode::SWAP16,
                Opcode::LOG0,
                Opcode::LOG1,
                Opcode::LOG2,
                Opcode::LOG3,
                Opcode::LOG4,
                Opcode::CREATE,
                Opcode::CALL,
                Opcode::CALLCODE,
                Opcode::RETURN,
                Opcode::DELEGATECALL,
                Opcode::CREATE2,
                Opcode::STATICCALL,
                Opcode::REVERT,
                Opcode::INVALID,
                Opcode::SELFDESTRUCT,
            ])
            .for_each(|(a, b)| {
                assert_eq!(a, b);
            });
    }
}
